_format_version: "3.0"
_transform: true

services:
  - name: keycloak-service
    url: http://keycloak:8082
    tags:
      - auth

  - name: openmrs-service
    url: http://openmrs:8080
    tags:
      - medical

  - name: odoo-service
    url: http://odoo:8069
    tags:
      - erp

  - name: nextcloud-service
    url: http://nextcloud:80
    tags:
      - storage

  - name: integration-service
    url: http://integration-service:3000
    tags:
      - integration

routes:
  - name: keycloak-route
    service: keycloak-service
    hosts:
      - localhost
    paths:
      - /auth
      - /keycloak

  - name: keycloak-realms-route
    service: keycloak-service
    hosts:
      - localhost
    paths:
      - /realms
    strip_path: false

  - name: openmrs-route
    service: openmrs-service
    hosts:
      - localhost
    paths:
      - /openmrs
    strip_path: false

  - name: openmrs-login-route
    service: openmrs-service
    hosts:
      - localhost
    paths:
      - /openmrs/login.htm
    strip_path: false

  - name: openmrs-callback-route
    service: openmrs-service
    hosts:
      - localhost
    paths:
      - /openmrs/login-callback
    strip_path: false

  - name: openmrs-api-route
    service: openmrs-service
    hosts:
      - localhost
    paths:
      - /api/omrs
    strip_path: true

  - name: odoo-route
    service: odoo-service
    hosts:
      - localhost
    paths:
      - /odoo
    strip_path: true

  - name: odoo-api-route
    service: odoo-service
    hosts:
      - localhost
    paths:
      - /api/odoo
    strip_path: true

  - name: nextcloud-route
    service: nextcloud-service
    hosts:
      - localhost
    paths:
      - /nextcloud
    strip_path: false

  - name: nextcloud-api-route
    service: nextcloud-service
    hosts:
      - localhost
    paths:
      - /api/files
    strip_path: true

  - name: integration-api-route
    service: integration-service
    hosts:
      - localhost
    paths:
      - /api/integration
    strip_path: true

plugins:
  - name: cors
    config:
      origins:
        - "*"
      methods:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
        - OPTIONS
      headers:
        - Accept
        - Content-Type
        - Authorization
      exposed_headers:
        - X-Auth-Token
      credentials: true
      max_age: 3600

  - name: rate-limiting
    route: openmrs-api-route
    config:
      minute: 100
      hour: 1000

  - name: rate-limiting
    route: odoo-api-route
    config:
      minute: 100
      hour: 1000

  - name: jwt
    route: openmrs-api-route
    config:
      uri_param_names:
        - jwt
      header_names:
        - authorization
      claims_to_verify:
        - exp

  - name: jwt
    route: odoo-api-route
    config:
      uri_param_names:
        - jwt
      header_names:
        - authorization
      claims_to_verify:
        - exp

  - name: pre-function
    route: openmrs-login-route
    config:
      access:
        - |
          -- Intercept OpenMRS login page
          local cookies = kong.request.get_header("cookie")
          local authenticated = kong.request.get_query_arg("authenticated")
          local bypass = kong.request.get_query_arg("bypass")
          
          -- If user is authenticated via Keycloak, show success page instead of login
          if cookies and cookies:match("keycloak_authenticated=true") then
            local success_html = [[
            <!DOCTYPE html>
            <html>
            <head>
              <title>‚úÖ Acceso Autorizado - OpenMRS</title>
              <meta charset="utf-8">
              <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); min-height: 100vh; }
                .container { max-width: 600px; margin: 50px auto; background: white; padding: 40px; border-radius: 12px; box-shadow: 0 10px 40px rgba(0,0,0,0.1); }
                h1 { color: #333; text-align: center; margin-bottom: 30px; }
                .success-info { background: #d4edda; color: #155724; padding: 20px; border-radius: 8px; margin-bottom: 25px; border: 1px solid #c3e6cb; }
                .btn { display: block; width: 100%; padding: 15px; margin: 10px 0; text-decoration: none; border-radius: 6px; font-weight: 500; text-align: center; background: #007bff; color: white; }
                .btn:hover { background: #0056b3; }
                .info-box { background: #e3f2fd; padding: 15px; border-radius: 6px; margin: 20px 0; border-left: 4px solid #2196f3; }
              </style>
            </head>
            <body>
              <div class="container">
                <h1>üè• OpenMRS - Acceso Autorizado</h1>
                
                <div class="success-info">
                  <h3>‚úÖ Autenticaci√≥n Completada</h3>
                  <p>Has sido autenticado correctamente a trav√©s de Keycloak SSO.</p>
                  <p>Tu sesi√≥n est√° activa y tienes acceso autorizado al sistema.</p>
                </div>
                
                <div class="info-box">
                  <h4>üîê Informaci√≥n de Seguridad</h4>
                  <p>‚Ä¢ Autenticaci√≥n: Keycloak SSO</p>
                  <p>‚Ä¢ Proxy: Kong API Gateway</p>
                  <p>‚Ä¢ Estado: Sesi√≥n activa</p>
                </div>
                
                <a href="http://localhost:8000/openmrs/?bypass=true" class="btn">
                  üöÄ Acceder al Sistema OpenMRS
                </a>
                
                <a href="http://localhost:8082/realms/clinica/protocol/openid-connect/logout" class="btn" style="background: #dc3545;">
                  üö™ Cerrar Sesi√≥n
                </a>
                
                <div style="margin-top: 30px; text-align: center; color: #666; font-size: 12px;">
                  Sistema protegido por Kong API Gateway + Keycloak SSO
                </div>
              </div>
            </body>
            </html>
            ]]
            
            kong.response.set_status(200)
            kong.response.set_header("Content-Type", "text/html; charset=utf-8")
            kong.response.exit(200, success_html)
          end
          
          -- If bypass, let it through
          if bypass == "true" then
            return
          end
          
          -- Otherwise redirect to main OpenMRS route for authentication
          kong.response.set_status(302)
          kong.response.set_header("Location", "http://localhost:8000/openmrs/")
          kong.response.exit(302)

  - name: pre-function
    route: openmrs-route
    config:
        - |
          -- Enhanced Keycloak OIDC integration for OpenMRS
          local auth_header = kong.request.get_header("authorization")
          local jwt_token = kong.request.get_query_arg("jwt")
          local path = kong.request.get_path()
          local code = kong.request.get_query_arg("code")
          local state = kong.request.get_query_arg("state")
          local session_state = kong.request.get_query_arg("session_state")
          
          -- Skip redirect for static assets
          if path:match("%.css$") or path:match("%.js$") or path:match("%.png$") or path:match("%.jpg$") or path:match("%.ico$") then
            return
          end
          
          -- Check if user has bypass parameter (remove this in production)
          local bypass = kong.request.get_query_arg("bypass")
          if bypass == "true" then
            return
          end
          
          -- Check if user has authenticated parameter (from our success page)
          local authenticated = kong.request.get_query_arg("authenticated")
          if authenticated == "true" then
            return
          end
          
          -- Handle OAuth2 callback from Keycloak
          if code and state then
            -- This is a callback from Keycloak
            -- Instead of showing success page, redirect directly to OpenMRS with authenticated flag
            local redirect_url = "http://localhost:8000/openmrs/?authenticated=true"
            
            kong.response.set_status(302)
            kong.response.set_header("Location", redirect_url)
            kong.response.set_header("Set-Cookie", "keycloak_authenticated=true; Path=/; HttpOnly")
            kong.response.exit(302)
          end
          
          -- Check for existing authentication cookie
          local cookies = kong.request.get_header("cookie")
          if cookies and cookies:match("keycloak_authenticated=true") then
            return
          end
          
          -- Check for existing authentication
          if not auth_header and not jwt_token then
            -- Redirect to Keycloak for authentication
            local keycloak_auth_url = "http://localhost:8082/realms/clinica/protocol/openid-connect/auth"
            local client_id = "openmrs-client"
            local redirect_uri = "http://localhost:8000/openmrs/"
            local response_type = "code"
            local scope = "openid profile email"
            local state = "openmrs-login-" .. ngx.time()
            
            local auth_url = string.format(
              "%s?client_id=%s&redirect_uri=%s&response_type=%s&scope=%s&state=%s",
              keycloak_auth_url, client_id, redirect_uri, response_type, scope, state
            )
            
            kong.response.set_status(302)
            kong.response.set_header("Location", auth_url)
            kong.response.exit(302)
          end

  - name: pre-function
    route: odoo-route
    config:
      access:
        - |
          -- Enhanced Keycloak OIDC integration for Odoo
          local auth_header = kong.request.get_header("authorization")
          local jwt_token = kong.request.get_query_arg("jwt")
          local path = kong.request.get_path()
          local code = kong.request.get_query_arg("code")
          local state = kong.request.get_query_arg("state")
          
          -- Skip redirect for static assets
          if path:match("%.css$") or path:match("%.js$") or path:match("%.png$") or path:match("%.jpg$") or path:match("%.ico$") then
            return
          end
          
          -- Check if user has bypass parameter (remove this in production)
          local bypass = kong.request.get_query_arg("bypass")
          if bypass == "true" then
            return
          end
          
          -- Check if user has authenticated parameter (from our success page)
          local authenticated = kong.request.get_query_arg("authenticated")
          if authenticated == "true" then
            return
          end
          
          -- Handle OAuth2 callback from Keycloak
          if code and state and state:match("odoo%-login") then
            -- This is a callback from Keycloak for Odoo
            -- Redirect directly to Odoo with authenticated flag
            local redirect_url = "http://localhost:8000/odoo/?authenticated=true"
            
            kong.response.set_status(302)
            kong.response.set_header("Location", redirect_url)
            kong.response.set_header("Set-Cookie", "keycloak_authenticated=true; Path=/; HttpOnly")
            kong.response.exit(302)
          end
          
          -- Check for existing authentication cookie
          local cookies = kong.request.get_header("cookie")
          if cookies and cookies:match("keycloak_authenticated=true") then
            return
          end
          
          if not auth_header and not jwt_token then
            -- Redirect to Keycloak for authentication
            local keycloak_auth_url = "http://localhost:8082/realms/clinica/protocol/openid-connect/auth"
            local client_id = "openmrs-client"  -- Using same client for simplicity
            local redirect_uri = "http://localhost:8000/odoo/"
            local response_type = "code"
            local scope = "openid profile email"
            local state = "odoo-login-" .. ngx.time()
            
            local auth_url = string.format(
              "%s?client_id=%s&redirect_uri=%s&response_type=%s&scope=%s&state=%s",
              keycloak_auth_url, client_id, redirect_uri, response_type, scope, state
            )
            
            kong.response.set_status(302)
            kong.response.set_header("Location", auth_url)
            kong.response.exit(302)
          end

consumers:
  - username: integration-service
    custom_id: integration-service-id
    keyauth_credentials:
      - key: integration-service-key
    jwt_secrets:
      - key: http://keycloak:8082/realms/clinica/integration-service
        secret: your-keycloak-shared-secret-integration
        algorithm: HS256

  - username: frontend-app
    custom_id: frontend-app-id
    keyauth_credentials:
      - key: frontend-app-key
    jwt_secrets:
      - key: http://keycloak:8082/realms/clinica/frontend-app
        secret: your-keycloak-shared-secret-frontend
        algorithm: HS256
