#!/bin/bash

# =============================================================================
# DENTAL HOSPITAL API - EJEMPLOS DE PRUEBAS
# =============================================================================
# Este script contiene ejemplos de llamadas a la API para probar todos los endpoints
# 
# Uso:
#   1. Modifica las variables de configuraci√≥n seg√∫n tu entorno
#   2. Ejecuta: bash test_api_examples.sh
#   3. O ejecuta comandos individuales copiando y pegando
#
# Prerrequisitos:
#   - curl instalado
#   - jq instalado (opcional, para formatear JSON)
#   - Servidor Odoo ejecut√°ndose
# =============================================================================

# Configuraci√≥n
BASE_URL="http://localhost:8069"
USERNAME="admin"
PASSWORD="admin"
AUTH_HEADER="Authorization: Basic $(echo -n "$USERNAME:$PASSWORD" | base64)"

echo "üè• DENTAL HOSPITAL API - EJEMPLOS DE PRUEBAS"
echo "============================================="
echo "Base URL: $BASE_URL"
echo "Usuario: $USERNAME"
echo ""

# =============================================================================
# FUNCIONES AUXILIARES
# =============================================================================

# Funci√≥n para hacer llamadas GET
api_get() {
    local endpoint="$1"
    local params="$2"
    echo "üì§ GET $endpoint"
    if [ -n "$params" ]; then
        endpoint="$endpoint?$params"
    fi
    curl -s -X GET "$BASE_URL$endpoint" \
        -H "Content-Type: application/json" \
        -H "$AUTH_HEADER" | jq '.' 2>/dev/null || cat
    echo ""
    echo "---"
}

# Funci√≥n para hacer llamadas POST
api_post() {
    local endpoint="$1"
    local data="$2"
    echo "üì§ POST $endpoint"
    echo "üìã Data: $data"
    curl -s -X POST "$BASE_URL$endpoint" \
        -H "Content-Type: application/json" \
        -H "$AUTH_HEADER" \
        -d "$data" | jq '.' 2>/dev/null || cat
    echo ""
    echo "---"
}

# Funci√≥n para hacer llamadas PUT
api_put() {
    local endpoint="$1"
    local data="$2"
    echo "üì§ PUT $endpoint"
    echo "üìã Data: $data"
    curl -s -X PUT "$BASE_URL$endpoint" \
        -H "Content-Type: application/json" \
        -H "$AUTH_HEADER" \
        -d "$data" | jq '.' 2>/dev/null || cat
    echo ""
    echo "---"
}

# =============================================================================
# 1. INFORMACI√ìN DEL SISTEMA
# =============================================================================

echo "1Ô∏è‚É£  INFORMACI√ìN DEL SISTEMA"
echo "============================"

# Obtener informaci√≥n de la API
api_get "/api/v1/info"

# =============================================================================
# 2. GESTI√ìN DE INCIDENTES
# =============================================================================

echo "2Ô∏è‚É£  GESTI√ìN DE INCIDENTES"
echo "========================="

# Listar todos los incidentes
api_get "/api/v1/incidents"

# Listar incidentes con l√≠mite
api_get "/api/v1/incidents" "limit=5&offset=0"

# Listar incidentes por estado
api_get "/api/v1/incidents" "state=draft"

# Crear nuevo incidente - Ejemplo 1: Problema de programaci√≥n
api_post "/api/v1/incidents" '{
  "title": "No puedo agendar cita",
  "description": "El sistema no me permite seleccionar una fecha disponible para mi cita dental. Siempre aparece un mensaje de error cuando intento confirmar.",
  "incident_type": "scheduling",
  "urgency": "medium"
}'

# Crear nuevo incidente - Ejemplo 2: Problema m√©dico
api_post "/api/v1/incidents" '{
  "title": "Dolor persistente despu√©s del tratamiento",
  "description": "Despu√©s del tratamiento de endodoncia realizado la semana pasada, sigo experimentando dolor intenso. El medicamento recetado no est√° funcionando.",
  "incident_type": "medical",
  "urgency": "high"
}'

# Crear nuevo incidente - Ejemplo 3: Problema t√©cnico
api_post "/api/v1/incidents" '{
  "title": "Error en el portal de pacientes",
  "description": "No puedo acceder a mi historial m√©dico desde el portal. La p√°gina se queda en blanco despu√©s de iniciar sesi√≥n.",
  "incident_type": "technical",
  "urgency": "low"
}'

# Crear nuevo incidente - Ejemplo 4: Problema de facturaci√≥n
api_post "/api/v1/incidents" '{
  "title": "Cobro duplicado en mi cuenta",
  "description": "En mi estado de cuenta aparece un cobro duplicado por el mismo tratamiento. Necesito que verifiquen y corrijan este error.",
  "incident_type": "billing",
  "urgency": "medium"
}'

# Obtener detalles de un incidente espec√≠fico (ID 1)
api_get "/api/v1/incidents/1"

# Actualizar un incidente
api_put "/api/v1/incidents/1" '{
  "state": "in_progress",
  "urgency": "high"
}'

# =============================================================================
# 3. GESTI√ìN DE PACIENTES
# =============================================================================

echo "3Ô∏è‚É£  GESTI√ìN DE PACIENTES"
echo "========================"

# Listar todos los pacientes
api_get "/api/v1/patients"

# Listar pacientes con l√≠mite y b√∫squeda
api_get "/api/v1/patients" "limit=10&search=Juan"

# Buscar pacientes por nombre parcial
api_get "/api/v1/patients" "search=Mar"

# Obtener detalles de un paciente espec√≠fico (ID 1)
api_get "/api/v1/patients/1"

# =============================================================================
# 4. GESTI√ìN DE CITAS
# =============================================================================

echo "4Ô∏è‚É£  GESTI√ìN DE CITAS"
echo "==================="

# Listar todas las citas
api_get "/api/v1/appointments"

# Listar citas con filtros de fecha
api_get "/api/v1/appointments" "date_from=2025-01-15&date_to=2025-01-31"

# Listar citas de un paciente espec√≠fico
api_get "/api/v1/appointments" "patient_id=1"

# Listar citas de un doctor espec√≠fico
api_get "/api/v1/appointments" "doctor_id=1"

# Listar citas con m√∫ltiples filtros
api_get "/api/v1/appointments" "patient_id=1&date_from=2025-01-15&limit=5"

# =============================================================================
# 5. GESTI√ìN DE PRESCRIPCIONES
# =============================================================================

echo "5Ô∏è‚É£  GESTI√ìN DE PRESCRIPCIONES"
echo "============================="

# Listar todas las prescripciones
api_get "/api/v1/prescriptions"

# Listar prescripciones de un paciente espec√≠fico
api_get "/api/v1/prescriptions" "patient_id=1"

# Listar prescripciones de un doctor espec√≠fico
api_get "/api/v1/prescriptions" "doctor_id=1"

# Listar prescripciones con paginaci√≥n
api_get "/api/v1/prescriptions" "limit=10&offset=0"

# =============================================================================
# 6. PRUEBAS DE ERRORES Y CASOS L√çMITE
# =============================================================================

echo "6Ô∏è‚É£  PRUEBAS DE ERRORES Y CASOS L√çMITE"
echo "====================================="

# Probar endpoint inexistente
echo "üì§ GET /api/v1/nonexistent (Debe devolver 404)"
curl -s -X GET "$BASE_URL/api/v1/nonexistent" \
    -H "Content-Type: application/json" \
    -H "$AUTH_HEADER" | jq '.' 2>/dev/null || cat
echo ""
echo "---"

# Probar acceso sin autenticaci√≥n
echo "üì§ GET /api/v1/incidents (Sin autenticaci√≥n - Debe devolver 401)"
curl -s -X GET "$BASE_URL/api/v1/incidents" \
    -H "Content-Type: application/json" | jq '.' 2>/dev/null || cat
echo ""
echo "---"

# Probar crear incidente con datos incompletos
echo "üì§ POST /api/v1/incidents (Datos incompletos - Debe devolver 400)"
curl -s -X POST "$BASE_URL/api/v1/incidents" \
    -H "Content-Type: application/json" \
    -H "$AUTH_HEADER" \
    -d '{"title": "Solo t√≠tulo"}' | jq '.' 2>/dev/null || cat
echo ""
echo "---"

# Probar acceso a recurso inexistente
echo "üì§ GET /api/v1/incidents/99999 (ID inexistente - Debe devolver 404)"
api_get "/api/v1/incidents/99999"

# Probar l√≠mites de paginaci√≥n
echo "üì§ GET /api/v1/incidents (L√≠mite excesivo)"
api_get "/api/v1/incidents" "limit=1000"

# =============================================================================
# 7. PRUEBAS DE RENDIMIENTO B√ÅSICAS
# =============================================================================

echo "7Ô∏è‚É£  PRUEBAS DE RENDIMIENTO B√ÅSICAS"
echo "=================================="

# Medir tiempo de respuesta del endpoint de informaci√≥n
echo "‚è±Ô∏è  Midiendo tiempo de respuesta de /api/v1/info"
time curl -s -X GET "$BASE_URL/api/v1/info" \
    -H "Content-Type: application/json" > /dev/null
echo ""

# Prueba de carga ligera (10 llamadas concurrentes)
echo "üöÄ Prueba de carga ligera (10 llamadas concurrentes)"
for i in {1..10}; do
    (curl -s -X GET "$BASE_URL/api/v1/info" \
        -H "Content-Type: application/json" > /dev/null) &
done
wait
echo "‚úÖ Prueba completada"
echo ""

# =============================================================================
# 8. DOCUMENTACI√ìN Y ESPECIFICACIONES
# =============================================================================

echo "8Ô∏è‚É£  DOCUMENTACI√ìN Y ESPECIFICACIONES"
echo "===================================="

# Verificar acceso a documentaci√≥n Swagger
echo "üìñ Verificando documentaci√≥n Swagger"
curl -s -I "$BASE_URL/api/v1/docs" | head -n 1
echo ""

# Verificar especificaci√≥n OpenAPI YAML
echo "üìÑ Verificando especificaci√≥n OpenAPI (YAML)"
curl -s -I "$BASE_URL/api/v1/openapi.yaml" | head -n 1
echo ""

# Verificar especificaci√≥n OpenAPI JSON
echo "üìÑ Verificando especificaci√≥n OpenAPI (JSON)"
curl -s -I "$BASE_URL/api/v1/openapi.json" | head -n 1
echo ""

# =============================================================================
# RESUMEN FINAL
# =============================================================================

echo "‚úÖ PRUEBAS COMPLETADAS"
echo "======================"
echo ""
echo "üìä Resumen de endpoints probados:"
echo "  ‚úÖ GET  /api/v1/info"
echo "  ‚úÖ GET  /api/v1/incidents"
echo "  ‚úÖ POST /api/v1/incidents"
echo "  ‚úÖ GET  /api/v1/incidents/{id}"
echo "  ‚úÖ PUT  /api/v1/incidents/{id}"
echo "  ‚úÖ GET  /api/v1/patients"
echo "  ‚úÖ GET  /api/v1/patients/{id}"
echo "  ‚úÖ GET  /api/v1/appointments"
echo "  ‚úÖ GET  /api/v1/prescriptions"
echo ""
echo "üìñ Documentaci√≥n disponible en:"
echo "  üåê Swagger UI: $BASE_URL/api/v1/docs"
echo "  üìÑ OpenAPI YAML: $BASE_URL/api/v1/openapi.yaml"
echo "  üìÑ OpenAPI JSON: $BASE_URL/api/v1/openapi.json"
echo ""
echo "üéâ ¬°Todas las pruebas han sido ejecutadas!"
